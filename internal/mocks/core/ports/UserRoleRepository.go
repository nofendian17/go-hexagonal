// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	domain "user-svc/internal/core/domain"

	mock "github.com/stretchr/testify/mock"
)

// UserRoleRepository is an autogenerated mock type for the UserRoleRepository type
type UserRoleRepository struct {
	mock.Mock
}

// AddUserRoles provides a mock function with given fields: userID, roles
func (_m *UserRoleRepository) AddUserRoles(userID string, roles []string) error {
	ret := _m.Called(userID, roles)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string) error); ok {
		r0 = rf(userID, roles)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserRoles provides a mock function with given fields: userID
func (_m *UserRoleRepository) GetUserRoles(userID string) ([]*domain.Role, error) {
	ret := _m.Called(userID)

	var r0 []*domain.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*domain.Role, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) []*domain.Role); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveUserRoles provides a mock function with given fields: userID, roles
func (_m *UserRoleRepository) RemoveUserRoles(userID string, roles []string) error {
	ret := _m.Called(userID, roles)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string) error); ok {
		r0 = rf(userID, roles)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserRoleRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRoleRepository creates a new instance of UserRoleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRoleRepository(t mockConstructorTestingTNewUserRoleRepository) *UserRoleRepository {
	mock := &UserRoleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
