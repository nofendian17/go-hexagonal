// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	domain "user-svc/internal/core/domain"

	mock "github.com/stretchr/testify/mock"
)

// PermissionRepository is an autogenerated mock type for the PermissionRepository type
type PermissionRepository struct {
	mock.Mock
}

// CreatePermission provides a mock function with given fields: role
func (_m *PermissionRepository) CreatePermission(role *domain.Permission) error {
	ret := _m.Called(role)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Permission) error); ok {
		r0 = rf(role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePermission provides a mock function with given fields: id
func (_m *PermissionRepository) DeletePermission(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllPermission provides a mock function with given fields:
func (_m *PermissionRepository) GetAllPermission() ([]*domain.Permission, error) {
	ret := _m.Called()

	var r0 []*domain.Permission
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*domain.Permission, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*domain.Permission); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Permission)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPermissionByID provides a mock function with given fields: id
func (_m *PermissionRepository) GetPermissionByID(id string) (*domain.Permission, error) {
	ret := _m.Called(id)

	var r0 *domain.Permission
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Permission, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Permission); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Permission)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPermissionByName provides a mock function with given fields: name
func (_m *PermissionRepository) GetPermissionByName(name string) (*domain.Permission, error) {
	ret := _m.Called(name)

	var r0 *domain.Permission
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Permission, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Permission); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Permission)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PermissionIsExist provides a mock function with given fields: name
func (_m *PermissionRepository) PermissionIsExist(name string) (bool, error) {
	ret := _m.Called(name)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePermission provides a mock function with given fields: role
func (_m *PermissionRepository) UpdatePermission(role *domain.Permission) error {
	ret := _m.Called(role)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Permission) error); ok {
		r0 = rf(role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPermissionRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPermissionRepository creates a new instance of PermissionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPermissionRepository(t mockConstructorTestingTNewPermissionRepository) *PermissionRepository {
	mock := &PermissionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
