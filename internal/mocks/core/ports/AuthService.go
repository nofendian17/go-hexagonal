// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	domain "user-svc/internal/core/domain"

	mock "github.com/stretchr/testify/mock"
)

// AuthService is an autogenerated mock type for the AuthService type
type AuthService struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: request
func (_m *AuthService) Authenticate(request *domain.GetTokenRequest) (*domain.Response, error) {
	ret := _m.Called(request)

	var r0 *domain.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.GetTokenRequest) (*domain.Response, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*domain.GetTokenRequest) *domain.Response); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.GetTokenRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: request
func (_m *AuthService) Logout(request *domain.GetDestroyTokenRequest) (*domain.Response, error) {
	ret := _m.Called(request)

	var r0 *domain.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.GetDestroyTokenRequest) (*domain.Response, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*domain.GetDestroyTokenRequest) *domain.Response); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.GetDestroyTokenRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Refresh provides a mock function with given fields: request
func (_m *AuthService) Refresh(request *domain.GetRefreshTokenRequest) (*domain.Response, error) {
	ret := _m.Called(request)

	var r0 *domain.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.GetRefreshTokenRequest) (*domain.Response, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*domain.GetRefreshTokenRequest) *domain.Response); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.GetRefreshTokenRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAuthService interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthService creates a new instance of AuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthService(t mockConstructorTestingTNewAuthService) *AuthService {
	mock := &AuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
