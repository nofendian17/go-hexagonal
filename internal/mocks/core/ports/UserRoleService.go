// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	domain "user-svc/internal/core/domain"

	mock "github.com/stretchr/testify/mock"
)

// UserRoleService is an autogenerated mock type for the UserRoleService type
type UserRoleService struct {
	mock.Mock
}

// AssignRolesToUser provides a mock function with given fields: request
func (_m *UserRoleService) AssignRolesToUser(request *domain.AssignRolesToUserRequest) (*domain.Response, error) {
	ret := _m.Called(request)

	var r0 *domain.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.AssignRolesToUserRequest) (*domain.Response, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*domain.AssignRolesToUserRequest) *domain.Response); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.AssignRolesToUserRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserRoles provides a mock function with given fields: request
func (_m *UserRoleService) GetUserRoles(request *domain.GetUserRolesRequest) (*domain.Response, error) {
	ret := _m.Called(request)

	var r0 *domain.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.GetUserRolesRequest) (*domain.Response, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*domain.GetUserRolesRequest) *domain.Response); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.GetUserRolesRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveRolesFromUser provides a mock function with given fields: request
func (_m *UserRoleService) RemoveRolesFromUser(request *domain.RemoveRolesFromUserRequest) (*domain.Response, error) {
	ret := _m.Called(request)

	var r0 *domain.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.RemoveRolesFromUserRequest) (*domain.Response, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*domain.RemoveRolesFromUserRequest) *domain.Response); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.RemoveRolesFromUserRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserRoleService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRoleService creates a new instance of UserRoleService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRoleService(t mockConstructorTestingTNewUserRoleService) *UserRoleService {
	mock := &UserRoleService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
