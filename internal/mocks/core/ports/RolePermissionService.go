// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	domain "user-svc/internal/core/domain"

	mock "github.com/stretchr/testify/mock"
)

// RolePermissionService is an autogenerated mock type for the RolePermissionService type
type RolePermissionService struct {
	mock.Mock
}

// AssignPermissionsToRole provides a mock function with given fields: request
func (_m *RolePermissionService) AssignPermissionsToRole(request *domain.AssignPermissionToRoleRequest) (*domain.Response, error) {
	ret := _m.Called(request)

	var r0 *domain.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.AssignPermissionToRoleRequest) (*domain.Response, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*domain.AssignPermissionToRoleRequest) *domain.Response); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.AssignPermissionToRoleRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRolePermissions provides a mock function with given fields: request
func (_m *RolePermissionService) GetRolePermissions(request *domain.GetRolePermissionRequest) (*domain.Response, error) {
	ret := _m.Called(request)

	var r0 *domain.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.GetRolePermissionRequest) (*domain.Response, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*domain.GetRolePermissionRequest) *domain.Response); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.GetRolePermissionRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemovePermissionsFromRole provides a mock function with given fields: request
func (_m *RolePermissionService) RemovePermissionsFromRole(request *domain.RemovePermissionFromRoleRequest) (*domain.Response, error) {
	ret := _m.Called(request)

	var r0 *domain.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.RemovePermissionFromRoleRequest) (*domain.Response, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*domain.RemovePermissionFromRoleRequest) *domain.Response); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.RemovePermissionFromRoleRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRolePermissionService interface {
	mock.TestingT
	Cleanup(func())
}

// NewRolePermissionService creates a new instance of RolePermissionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRolePermissionService(t mockConstructorTestingTNewRolePermissionService) *RolePermissionService {
	mock := &RolePermissionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
