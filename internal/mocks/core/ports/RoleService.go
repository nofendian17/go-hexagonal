// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	domain "user-svc/internal/core/domain"

	mock "github.com/stretchr/testify/mock"
)

// RoleService is an autogenerated mock type for the RoleService type
type RoleService struct {
	mock.Mock
}

// CreateRole provides a mock function with given fields: request
func (_m *RoleService) CreateRole(request *domain.CreateRoleRequest) (*domain.Response, error) {
	ret := _m.Called(request)

	var r0 *domain.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.CreateRoleRequest) (*domain.Response, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*domain.CreateRoleRequest) *domain.Response); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.CreateRoleRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRole provides a mock function with given fields: id
func (_m *RoleService) DeleteRole(id string) (*domain.Response, error) {
	ret := _m.Called(id)

	var r0 *domain.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Response, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Response); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRole provides a mock function with given fields: id
func (_m *RoleService) GetRole(id string) (*domain.Response, error) {
	ret := _m.Called(id)

	var r0 *domain.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Response, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Response); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoles provides a mock function with given fields:
func (_m *RoleService) GetRoles() (*domain.Response, error) {
	ret := _m.Called()

	var r0 *domain.Response
	var r1 error
	if rf, ok := ret.Get(0).(func() (*domain.Response, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *domain.Response); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Response)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRole provides a mock function with given fields: request
func (_m *RoleService) UpdateRole(request *domain.UpdateRoleRequest) (*domain.Response, error) {
	ret := _m.Called(request)

	var r0 *domain.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.UpdateRoleRequest) (*domain.Response, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*domain.UpdateRoleRequest) *domain.Response); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.UpdateRoleRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRoleService interface {
	mock.TestingT
	Cleanup(func())
}

// NewRoleService creates a new instance of RoleService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRoleService(t mockConstructorTestingTNewRoleService) *RoleService {
	mock := &RoleService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
