// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Hasher is an autogenerated mock type for the Hasher type
type Hasher struct {
	mock.Mock
}

// CheckPassword provides a mock function with given fields: hashedPassword, currentPassword, salt
func (_m *Hasher) CheckPassword(hashedPassword string, currentPassword string, salt []byte) bool {
	ret := _m.Called(hashedPassword, currentPassword, salt)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, []byte) bool); ok {
		r0 = rf(hashedPassword, currentPassword, salt)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GenerateRandomSalt provides a mock function with given fields:
func (_m *Hasher) GenerateRandomSalt() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HashPassword provides a mock function with given fields: password, salt
func (_m *Hasher) HashPassword(password string, salt []byte) string {
	ret := _m.Called(password, salt)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, []byte) string); ok {
		r0 = rf(password, salt)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewHasher interface {
	mock.TestingT
	Cleanup(func())
}

// NewHasher creates a new instance of Hasher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHasher(t mockConstructorTestingTNewHasher) *Hasher {
	mock := &Hasher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
