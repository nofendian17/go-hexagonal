// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	jwt "github.com/golang-jwt/jwt/v5"
	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"
)

// JWTAuthenticator is an autogenerated mock type for the JWTAuthenticator type
type JWTAuthenticator struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: c
func (_m *JWTAuthenticator) Authenticate(c echo.Context) (*jwt.Token, error) {
	ret := _m.Called(c)

	var r0 *jwt.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context) (*jwt.Token, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(echo.Context) *jwt.Token); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewJWTAuthenticator interface {
	mock.TestingT
	Cleanup(func())
}

// NewJWTAuthenticator creates a new instance of JWTAuthenticator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewJWTAuthenticator(t mockConstructorTestingTNewJWTAuthenticator) *JWTAuthenticator {
	mock := &JWTAuthenticator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
